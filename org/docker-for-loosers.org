
#+TITLE: Introducción a docker
#+AUTHOR: Patricio Martínez


* Introducción

[[./images/docker_logo.png]]


Docker es un proyecto de código abierto que automatiza el despliegue de aplicaciones dentro de contenedores de software, proporcionando una capa adicional de abstracción y automatización de Virtualización a nivel de sistema operativo en Linux.2​ Docker utiliza 
características de aislamiento de recursos del kernel Linux, tales como cgroups y espacios de nombres (namespaces) para permitir que "contenedores" independientes se ejecuten dentro de una sola instancia de Linux, evitando la sobrecarga de iniciar y mantener máquinas virtuales.3​

El soporte del kernel Linux para los espacios de nombres4​ aísla la vista que tiene una aplicación de su entorno operativo, incluyendo árboles de proceso, red, ID de usuario y sistemas de archivos montados, mientras que los cgroups del kernel proporcionan aislamiento de recursos, incluyendo la CPU, la memoria, el bloque de E / S y de la red. Desde la versión 0.9, Docker incluye la biblioteca libcontainer como su propia manera de utilizar directamente las facilidades de virtualización que ofrece el kernel Linux, además de utilizar las interfaces abstraídas de virtualización mediante libvirt, LXC (Linux Containers) y systemd-nspawn.5​6​7​

De acuerdo con la firma analista de la industria 451 Research, "Docker es una herramienta que puede empaquetar una aplicación y sus dependencias en un contenedor virtual que se puede ejecutar en cualquier servidor Linux. Esto ayuda a permitir la flexibilidad y portabilidad en donde la aplicación se puede ejecutar, ya sea en las instalaciones físicas, la nube pública, nube privada, etc.8​

En resumen:

[[./images/docker.png]]

* Instalar docker

En ArchLinux haremos 

#+begin_src sh
yaourt -S docker
#+end_src

A continuación vamos a iniciar el demonio y habilitarlo en el arranque

#+begin_src sh 
sudo systemctl start docker
sudo systemctl enable docker
#+end_src 

* Pasos básicos

** Instalar un docker

Ejemplo de instalar un busybox

#+begin_src sh :exports code :results code :tangle yes 
docker pull busybox
#+end_src 

#+RESULTS:
#+BEGIN_SRC sh
Using default tag: latest
latest: Pulling from library/busybox
07a152489297: Pulling fs layer
07a152489297: Download complete
07a152489297: Pull complete
Digest: sha256:141c253bc4c3fd0a201d32dc1f493bcf3fff003b6df416dea4f41046e0f37d47
Status: Downloaded newer image for busybox:latest
#+END_SRC



Usamos sudo por temas de servicio pero lo ideal es crear un grupo y añadir nuestro usuario a ese grupo.

#+begin_src sh :exports code :results code :tangle yes
sudo groupadd docker
sudo usermod -aG docker $USER
#+end_src

** Ejecutando docker

#+BEGIN_SRC  sh :exports code :results code :tangle yes
docker run busybox
#+END_SRC

#+RESULTS:
#+BEGIN_SRC sh
#+END_SRC

Nuestro docker está ahora funcionando

Para verlo ejecutamos:

#+begin_src sh :exports code :results code :tangle yes
docker ps
#+end_src

#+RESULTS:
#+BEGIN_SRC sh
CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES
#+END_SRC

No aparece nada porque no está corriendo así que ejecutamos

#+begin_src sh :exports code :results code :tangle yes
docker ps -a
#+end_src

#+RESULTS:
#+BEGIN_SRC sh
CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS                     PORTS               NAMES
281f7341e2b2        busybox             "sh"                9 seconds ago       Exited (0) 7 seconds ago                       hopeful_dubinsky
#+END_SRC

Ahora vamos a ejecutar

#+begin_src sh
docker run -it busybox sh
#+end_src

Con la etiqueta *it* lo que hacemos es activar la interactividad con la terminal tty

** Borrando un contenedor


Para borrar la imagen ejecutaremos lo siguiente

#+begin_src sh
docker rm ID del contenedor
#+end_src 

Para facilitar esto podemos borrar los contenedores de los cuales su estado sea /exited/ 

#+begin_src sh :exports code :results code :tangle yes
docker rm $(docker ps -a -q -f status=exited)
#+END_SRC

#+RESULTS:
#+BEGIN_SRC sh
#+END_SRC


** Borrando imágenes 

Para borrar la imagen veremos cual es su id y lo borraremos con la opción rmi

#+begin_src sh 
docker images
docker rmi id-imagen
#+end_src

* Ejemplo de aplicación Web con Docker

Vamos a ejecutar el siguiente comando

sudo docker run prakhar1989/static-site

Con esto a la vez descargamos y ejecutamos la imagen de docker.

En este caso el cliente no expone sus puertos. Para hacer esto volveremos a ejecutar *docker run*. Al mismo tiempo
haremos que nuestra terminal no se quede anclada ejecutando el contenedor. Esto es llamado modo *detached*

#+begin_src sh :exports code :results code :tangle yes 
docker run -d -P --name static-site prakhar1989/static-file
#+end_src


La opción -d hace el desanclaje de nuesta terminal, -P public todos los puertos de forma aleatoria y finalmente --name le da un nombre
a nuestro contenedor. Ahora podremos ver los puertos con la siguiente orden:

#+begin_src sh
docker port static-site
#+end_src

También podemos especificar los puertos con:

#+begin_src sh
docker run -p 8888:80 prakhar1989/static-site
#+end_src 

* Viendo otro ejemplo con sonar


Vamos a instalar la imagen oficial de [[https://www.sonarqube.org/][sonarqube]]. 

Para ellos podemos hacer un 

#+BEGIN_SRC shell
docker search sonarqube
#+END_SRC

y posteriormente un:

#+BEGIN_SRC shell
docker pull sonarqube 
#+END_SRC

Podemos comprobar que la imagen se ha bajado con *docker images* y la levantaremos con:

#+BEGIN_SRC shell
docker run -d --name sonarqube -p 9000:9000 sonarqube
#+END_SRC

Este comando lo que realiza es levantar un contenedor con los siguientes parámetros: 

+ d : Levanta el contenedor en segundo plano
+ name : Nombre asociado al contenedor
+ p: Mapeamos el puerto 9000 de nuestro equipo con el 9000 del contenedor

Para acceder al sonar instalado en el contenedor nos bastaría con abrir un al navegador con la URL http:/localhost:9000, pero al usar un Mac (o Windows) y necesitar de un software intermedio, boot2docker, necesitaremos conocer la ip de la máquina virtual que crea boot2docker con el comando

*boot2docker ip*

Para parar el contenedor ejecutamos la orden:

#+BEGIN_SRC shell
docker stop sonarqube
#+END_SRC

Para borrar el contenedor ejecutamos la orden:

#+BEGIN_SRC shell
docker rm sonarqube
#+END_SRC

Hay que tener en cuenta que al borrar un contenedor perderíamos los cambios que hubiésemos realizado en él. Una de las opciones que tendríamos si queremos que los cambios que realicemos al contenedor sean permanentes, sería la de generar una imagen a partir del contenedor, para ello haríamos lo siguiente: 

: docker commit -m "<comentario>" -a "<autor>" <id_contenedor> <nombre_imagen>:<etiqueta_imagen>  

#+BEGIN_SRC shell
docker commit -m "Nueva imagen" -a "maxxcan" sonarqube2 maxxcan/sonar
#+END_SRC

* Dockerfile  


En este último apartado vamos a ver como crear una nueva imagen a través de un fichero llamado Dockerfile. 

Un fichero Dockerfile es simplemente un fichero de texto que nos permite definir las instrucciones a seguir por Docker para construir una imagen, en otras palabras es como una receta para crear nuestras imágenes, que servirán de forma posterior para correr nuestros contenedores. 

En este ejemplo vamos a crear una imagen con un SO Ubuntu y le vamos a instalar el servidor web Apache, para ello contamos con un Dockerfile: 

#+BEGIN_SRC 
 FROM ubuntu  
 MAINTAINER Jorge Pacheco  
 ENV http_proxy http://user:pass@proxy/  
 ENV https_proxy http://user:pass@proxy/  
 RUN apt-get update  
 RUN apt-get install apache2 -y  
 RUN echo "<h1>Apache with Docker</h1>" > /var/www/html/index.html  
 EXPOSE 80  
 ENTRYPOINT apache2ctl -D FOREGROUND 
#+END_SRC

Vamos a describir los comandos del Dockerfile:

- FROM : Indica la imagen que tomamos como base, en este caso la imagen oficial de ubuntu
- MAINTAINER: Especifica el autor de la imagen.
- ENV: Definimos una variables de entorno en la imagen base.

  - http_proxy http://user:pass@proxy/ — Definimos la variable http_proxy
  - https_proxy http://user:pass@proxy/ — Definimos la variable https_proxy

- RUN: Ejecuta una sentencia sobre la imagen base 

  - apt-get update : actualiza los repositorios de ubuntu
  - apt-get install apache2 -y : Instala el apache
  - echo “<h1>Apache with Docker</h1>” > /var/www/html/index.html : crea un fichero index.html

- EXPOSE: Exponemos el puerto 80 del contenedor para que pueda ser mapeado por la máquina anfitrión.
- ENTRYPOINT: Indicamos que se ejecute apache2ctl -D FOREGROUND cada vez que arranquemos el contenedor.

Una vez tengamos definido el fichero Dockerfile, vamos a construir la imagen:

#+BEGIN_SRC shell
docker build -t docker/apache
#+END_SRC

Le estamos indicando a docker que construya una imagen con el nombre docker/apache a partir del DockerFile que se encuentra en la misma ruta donde ejecutamos el comando.

Si quisiesemos añadir algún fichero de configuración como por ejemplo *httpd.conf* tenemos que añadir la siguiente línea al Dockerfile:

: ADD httpd.conf /etc/apache2 

Y el fichero a copiar tiene que estar en la misma ruta que *Dockerfile* 

Ya estamos en disposición de arrancar un contenedor a partir de la imagen que hemos creado: 

#+BEGIN_SRC shell
docker run --name apache1 -d -p 90:80 docker/apache  
#+END_SRC

Arrancamos un contenedor, que llamaremos apache1, mapeando el puerto 80 del contenedor con el 90 de nuestra máquina, a partir de la imagen jpacheco/apache. Para comprobar que todo ha ido bien
abrimos un navegador con la url adecuada en el puerto 90 

